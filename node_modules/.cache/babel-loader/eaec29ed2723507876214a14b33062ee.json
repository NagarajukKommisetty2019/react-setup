{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\v-nagkom\\\\react-setup\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\v-nagkom\\\\react-setup\\\\src\\\\Components\\\\Accordion\\\\Accordion.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport * as Globals from '../Helpers/Global/Global';\nimport ExpandCollapseBtn from \"../Accordion/ExpandCollapseBtn/ExpandCollapseBtn\";\nimport AccordionTab from \"../Accordion/AccordionTab/AccordionTab\";\nimport \"../Accordion/Accordion.css\";\n\nclass Accordion extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      componentData: \"\",\n      expandCollapseAllText: \"Expand All\"\n    };\n\n    this.showHideAllAccrodiontabs = accordionTabsData => {\n      let currentExpCollText = this.state.expandCollapseAllText;\n      let newTabState = \"\";\n\n      if (currentExpCollText == \"Expand All\") {\n        newTabState = \"expand\";\n        iterateDataOnExpandCollapseClick(accordionTabsData, newTabState);\n        currentExpCollText = \"Collapse All\";\n      } else {\n        newTabState = \"collapse\";\n        iterateDataOnExpandCollapseClick(accordionTabsData, newTabState);\n        currentExpCollText = \"Expand All\";\n      }\n\n      this.setState({\n        expandCollapseAllText: currentExpCollText,\n        componentData: accordionTabsData\n      });\n    };\n\n    this.iterateDataOnExpandCollapseClick = (accordionTabsData, newTabState) => {\n      Object.keys(accordionTabsData).map((key, index) => {\n        if (index > 0) {\n          //   if(currentExpCollText == \"Expand All\"){\n          Object.values(accordionTabsData)[index].currentState = newTabState; // }\n          //  else{\n          // Object.values(accordionTabsData)[index].currentState = \"expand\"\n          // currentExpCollText = \"Expand All\"\n          //  }\n        }\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      componentData: this.props.compData\n    });\n  }\n\n  showHideCurrentTab(accordionTabsData, index) {\n    //var tempTabsDataArray = {...this.state.componentData}\n    Object.values(accordionTabsData)[index].currentState == \"collapse\" ? Object.values(accordionTabsData)[index].currentState = \"Expand\" : Object.values(accordionTabsData)[index].currentState = \"collapse\"; //   console.log(index+\"<><>\"+ Object.values(accordionTabsData)[index].currentState);\n    //     Object.values(accordionTabsData)[index].currentState= currentTabState\n    //tempTabsDataArray[index].currentState = currentTabState\n\n    this.setState({\n      componentData: accordionTabsData\n    });\n  }\n\n  render() {\n    //console.log(this.props.compData.AccordionHeadline);\n    let heading = null;\n\n    let accordionTabsData = _objectSpread({}, this.state.componentData);\n\n    let accordionTabs = Object.keys(accordionTabsData).map((key, index) => {\n      if (index == 0) {\n        heading = Globals.isH1orH2(\"h2\", accordionTabsData[key], \"c-heading-3 pt-0 pb-0 mt-2 text-center\");\n      } else {\n        return React.createElement(AccordionTab, {\n          key: \"AccordionTab_\" + index,\n          accordionTabHeading: accordionTabsData[key].tabHeading,\n          accordionContent: accordionTabsData[key].tabContent,\n          clicked: () => this.showHideCurrentTab(accordionTabsData, index),\n          currentState: accordionTabsData[key].currentState,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83\n          },\n          __self: this\n        });\n      }\n    });\n    return React.createElement(\"section\", {\n      className: \"accordion clear-both @accordwithDesc @Model.themeClass @Model.bgColor @Model.sectionpaddingClass top-parent-element\",\n      \"data-grid\": \"container\",\n      id: \"@Model.componentId\",\n      \"data-tag\": \"tagging\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"accordion-container pb-0 \",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"xs-col-24-24 s-col-24-24 pl-0 accordion-headline-bar no-padding\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(ExpandCollapseBtn, {\n      ExpandCollapseText: this.state.expandCollapseAllText,\n      ariaLabel: \"Click to \" + this.state.expandCollapseAllText,\n      expandAllClicked: () => {\n        this.showHideAllAccrodiontabs(this.state.componentData);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"headline-holder\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, heading)), React.createElement(\"div\", {\n      className: \"accordion-main-panel xs-col-24-24 s-col-24-24 pl-0 no-padding\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, accordionTabs), React.createElement(\"div\", {\n      className: \"accordion-foot-notes xs-col-24-24 s-col-24-24 pb-1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"c-paragraph-3\",\n      style: {\n        display: \"none\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default Accordion;","map":{"version":3,"sources":["C:/Users/v-nagkom/react-setup/src/Components/Accordion/Accordion.js"],"names":["React","Component","Globals","ExpandCollapseBtn","AccordionTab","Accordion","state","componentData","expandCollapseAllText","showHideAllAccrodiontabs","accordionTabsData","currentExpCollText","newTabState","iterateDataOnExpandCollapseClick","setState","Object","keys","map","key","index","values","currentState","componentDidMount","props","compData","showHideCurrentTab","render","heading","accordionTabs","isH1orH2","tabHeading","tabContent","display"],"mappings":"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","sourcesContent":["import React ,{Component} from \"react\";\r\nimport * as Globals from '../Helpers/Global/Global';\r\nimport ExpandCollapseBtn from \"../Accordion/ExpandCollapseBtn/ExpandCollapseBtn\";\r\nimport AccordionTab from \"../Accordion/AccordionTab/AccordionTab\";\r\nimport \"../Accordion/Accordion.css\";\r\n\r\nclass Accordion extends Component{\r\n\r\n    state={\r\n        componentData :  \"\",\r\n        expandCollapseAllText : \"Expand All\"\r\n\r\n    }\r\n    componentDidMount(){\r\n        this.setState({\r\n            componentData:this.props.compData\r\n        })\r\n    }\r\n    showHideCurrentTab(accordionTabsData,index){\r\n        //var tempTabsDataArray = {...this.state.componentData}\r\n        Object.values(accordionTabsData)[index].currentState==\"collapse\"?Object.values(accordionTabsData)[index].currentState=\"Expand\":Object.values(accordionTabsData)[index].currentState=\"collapse\"\r\n     //   console.log(index+\"<><>\"+ Object.values(accordionTabsData)[index].currentState);\r\n        //     Object.values(accordionTabsData)[index].currentState= currentTabState\r\n        //tempTabsDataArray[index].currentState = currentTabState\r\n       \r\n        this.setState({\r\n            componentData:accordionTabsData\r\n        });  \r\n    }\r\n    showHideAllAccrodiontabs = (accordionTabsData)=>{\r\n\r\n        let currentExpCollText = this.state.expandCollapseAllText;\r\n        let newTabState = \"\";\r\n        if(currentExpCollText == \"Expand All\"){\r\n            newTabState = \"expand\"\r\n            iterateDataOnExpandCollapseClick(accordionTabsData,newTabState)\r\n            currentExpCollText = \"Collapse All\"\r\n        }\r\n        else{\r\n            newTabState = \"collapse\"\r\n            iterateDataOnExpandCollapseClick(accordionTabsData,newTabState)\r\n            currentExpCollText = \"Expand All\"\r\n        }\r\n       \r\n        this.setState({\r\n                expandCollapseAllText : currentExpCollText,\r\n                componentData : accordionTabsData\r\n        });\r\n    }\r\n    iterateDataOnExpandCollapseClick = (accordionTabsData,newTabState)=>{\r\n        Object.keys(accordionTabsData).map((key,index)=>{\r\n                \r\n            if (index>0)\r\n            {\r\n             //   if(currentExpCollText == \"Expand All\"){\r\n                    Object.values(accordionTabsData)[index].currentState = newTabState\r\n                    \r\n               // }\r\n               \r\n              //  else{\r\n                   // Object.values(accordionTabsData)[index].currentState = \"expand\"\r\n               // currentExpCollText = \"Expand All\"\r\n              //  }\r\n            }\r\n        })\r\n    }\r\n    \r\nrender(){\r\n    \r\n    \r\n    //console.log(this.props.compData.AccordionHeadline);\r\n\r\n    let heading = null;\r\n    let accordionTabsData = {...this.state.componentData}\r\n    let accordionTabs = Object.keys(accordionTabsData).map((key,index)=>{\r\n        if(index==0)\r\n        {\r\n        \r\n            heading = Globals.isH1orH2(\"h2\",accordionTabsData[key],\"c-heading-3 pt-0 pb-0 mt-2 text-center\");\r\n            \r\n        }\r\n    else{\r\n       return( <AccordionTab\r\n        key={\"AccordionTab_\"+index}\r\n        accordionTabHeading={accordionTabsData[key].tabHeading}\r\n        accordionContent={accordionTabsData[key].tabContent} \r\n        clicked={()=>this.showHideCurrentTab(accordionTabsData,index)}\r\n        currentState = {accordionTabsData[key].currentState} \r\n        />)\r\n    }\r\n});\r\n    return(<section className=\"accordion clear-both @accordwithDesc @Model.themeClass @Model.bgColor @Model.sectionpaddingClass top-parent-element\" data-grid=\"container\" id=\"@Model.componentId\" data-tag=\"tagging\">\r\n    <div className=\"accordion-container pb-0 \">\r\n        <div className=\"xs-col-24-24 s-col-24-24 pl-0 accordion-headline-bar no-padding\">    \r\n        <ExpandCollapseBtn ExpandCollapseText={this.state.expandCollapseAllText} \r\n                           ariaLabel={\"Click to \"+this.state.expandCollapseAllText}\r\n                           expandAllClicked={()=>{this.showHideAllAccrodiontabs(this.state.componentData)}} />\r\n            <div className =\"headline-holder\">\r\n            \r\n                {heading}\r\n              \r\n            </div>           \r\n            \r\n\r\n           {/* if(Model.accordianDescription != null && Model.accordianDescription != \"\")\r\n           {           \r\n             //   @Html.Raw(Model.accordianDescription);          \r\n           } */}\r\n            \r\n        </div>\r\n        <div className=\"accordion-main-panel xs-col-24-24 s-col-24-24 pl-0 no-padding\">\r\n          \r\n           {accordionTabs}\r\n        </div>\r\n        {/* if (Model.footnotes != \"\")\r\n        { */}\r\n            <div className=\"accordion-foot-notes xs-col-24-24 s-col-24-24 pb-1\">\r\n        <p className=\"c-paragraph-3\" style={{display: \"none\"}}></p>\r\n            </div>\r\n        {/* } */}\r\n\r\n    </div>\r\n</section>\r\n    )\r\n    \r\n    }\r\n    \r\n}\r\n    \r\n\r\nexport default Accordion;"]},"metadata":{},"sourceType":"module"}